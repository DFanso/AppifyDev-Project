name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Install rsync
      run: sudo apt-get update && sudo apt-get install -y rsync sshpass
      
    - name: Create deployment directory on VPS
      run: |
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /home/${{ secrets.VPS_USER }}/tech-news-app"
        
    - name: Sync project files to VPS
      run: |
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='__pycache__' \
          --exclude='.env' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          --exclude='tech_news.db' \
          -e "sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no" \
          ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/${{ secrets.VPS_USER }}/tech-news-app/
          
    - name: Create .env file on VPS
      run: |
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
        cd /home/${{ secrets.VPS_USER }}/tech-news-app
        cat > .env << 'ENVEOF'
        # AI Configuration
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        
        # Database
        DATABASE_URL=sqlite:///./tech_news.db
        
        # Redis Cache
        REDIS_URL=${{ secrets.REDIS_URL }}
        
        # API Configuration
        API_HOST=0.0.0.0
        API_PORT=8000
        FRONTEND_URL=http://localhost:3000
        
        # News Processing
        MAX_ARTICLES_PER_BATCH=50
        RSS_TIMEOUT=30
        
        # Production settings
        ENVIRONMENT=production
        ENVEOF
        EOF
        
    - name: Install Docker and Docker Compose on VPS (if not exists)
      run: |
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
        # Check if Docker is installed
        if ! command -v docker &> /dev/null; then
          echo "Installing Docker..."
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker $USER
        fi
        
        # Check if Docker Compose is installed
        if ! command -v docker-compose &> /dev/null; then
          echo "Installing Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        EOF
        
    - name: Stop existing containers and deploy
      run: |
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
        cd /home/${{ secrets.VPS_USER }}/tech-news-app
        
        # Stop and remove existing containers
        docker-compose down --remove-orphans || true
        
        # Remove old images to free space
        docker system prune -f || true
        
        # Build and start new containers
        docker-compose up --build -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30
        
        # Check service status
        docker-compose ps
        
        # Check if API is responding
        for i in {1..10}; do
          if curl -f http://localhost:8000/health &> /dev/null; then
            echo "API is healthy!"
            break
          else
            echo "Waiting for API to be ready... (attempt $i/10)"
            sleep 10
          fi
        done
        EOF
        
    - name: Run initial data fetch
      run: |
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
        cd /home/${{ secrets.VPS_USER }}/tech-news-app
        
        # Run initial news fetch in the background
        docker-compose exec -T api python scripts/fetch_news.py &
        
        echo "Initial news fetch started in background"
        EOF
        
    - name: Setup log rotation and monitoring
      run: |
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
        # Create log rotation config
        sudo tee /etc/logrotate.d/tech-news-app > /dev/null << 'LOGEOF'
        /home/${{ secrets.VPS_USER }}/tech-news-app/logs/*.log {
            daily
            missingok
            rotate 7
            compress
            delaycompress
            notifempty
            sharedscripts
        }
        LOGEOF
        
        # Create cron job for news fetching every 30 minutes
        (crontab -l 2>/dev/null | grep -v "fetch_news.py"; echo "*/30 * * * * cd /home/${{ secrets.VPS_USER }}/tech-news-app && docker-compose exec -T api python scripts/fetch_news.py >> /home/${{ secrets.VPS_USER }}/tech-news-app/logs/cron.log 2>&1") | crontab -
        
        # Create logs directory
        mkdir -p /home/${{ secrets.VPS_USER }}/tech-news-app/logs
        EOF
        
    - name: Display deployment status
      run: |
        echo "üöÄ Deployment completed!"
        echo "üìä Service Status:"
        sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cd /home/${{ secrets.VPS_USER }}/tech-news-app && docker-compose ps"
        echo ""
        echo "üîó Access your application:"
        echo "   Backend API: http://${{ secrets.VPS_HOST }}:8000"
        echo "   API Docs: http://${{ secrets.VPS_HOST }}:8000/docs"
        echo "   Redis: ${{ secrets.VPS_HOST }}:6379"
        echo ""
        echo "üìù Logs can be viewed with:"
        echo "   docker-compose logs -f"
